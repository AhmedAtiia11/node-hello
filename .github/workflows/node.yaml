name: Node.js CI/CD 

on:
  push:
    branches:
      - 'main'

jobs:
  deploy:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [18.19.1]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.19.1
        cache: 'npm'

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}


    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.4
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

    # Phase 1: Build new image
    - name: Build Docker Image
      run: terraform apply -target=docker_image.app_image -auto-approve -input=false
      env:
        TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
        TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Phase 2: Push to registry
    - name: Push Image to Docker Hub
      run: terraform apply -target=docker_registry_image.app_image -auto-approve -input=false
      env:
        TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
        TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Phase 3: Destroy old infrastructure
    - name: Destroy Previous Deployment
      run: terraform destroy -target=docker_container.app_container -auto-approve -input=false
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      continue-on-error: true

    # Phase 4: Deploy new infrastructure
    - name: Deploy New Container
      run: terraform apply -auto-approve -input=false
      env:
        TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
        TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}